name: Build toolchain variants

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      binutils_branch:
        description: 'Binutils branch to build'
        required: false
        default: 'woarm64'
      gcc_branch:
        description: 'GCC branch to build'
        required: false
        default: 'woarm64'
      mingw_branch:
        description: 'Mingw branch to build'
        required: false
        default: 'woarm64'
      openblas_branch:
        description: 'OpenBLAS branch to test'
        required: false
        default: 'develop'
      openssl_branch:
        description: 'OpenSSL branch to test'
        required: false
        default: 'fix-tests'
  workflow_call:
    inputs:
      binutils_branch:
        type: string
      gcc_branch:
        type: string
      mingw_branch:
        type: string

env:
  BINUTILS_REPO: Windows-on-ARM-Experiments/binutils-woarm64
  BINUTILS_BRANCH: ${{ inputs.binutils_branch || 'woarm64' }}
  BINUTILS_VERSION: binutils-master

  GCC_REPO: Windows-on-ARM-Experiments/gcc-woarm64
  GCC_BRANCH: ${{ inputs.gcc_branch || 'woarm64' }}
  GCC_VERSION: gcc-master

  MINGW_REPO: Windows-on-ARM-Experiments/mingw-woarm64
  MINGW_BRANCH: ${{ inputs.mingw_branch || 'woarm64' }}
  MINGW_VERSION: mingw-w64-master

  OPENBLAS_REPO: OpenMathLib/OpenBLAS.git
  OPENBLAS_BRANCH: ${{ inputs.openblas_branch || 'develop' }}
  OPENBLAS_VERSION: openblas-develop

  ZLIB_REPO: madler/zlib
  ZLIB_BRANCH: 'develop'
  ZLIB_VERSION: zlib-develop

  OPENSSL_REPO: Windows-on-ARM-Experiments/openssl
  OPENSSL_BRANCH: ${{ inputs.openssl_branch || 'fix-tests' }}
  OPENSSL_VERSION: openssl-master

  LIBJPEG_TURBO_REPO: libjpeg-turbo/libjpeg-turbo
  LIBJPEG_TURBO_BRANCH: main
  LIBJPEG_TURBO_VERSION: libjpeg-turbo-main

  FFMPEG_REPO: FFmpeg/FFmpeg
  FFMPEG_BRANCH: release/6.1
  FFMPEG_VERSION: ffmpeg-master

  TOOLCHAIN_PATH: ${{ github.workspace }}/cross
  TOOLCHAIN_NAME: aarch64-w64-mingw32-msvcrt
  TOOLCHAIN_PACKAGE_NAME: aarch64-w64-mingw32-msvcrt-toolchain.tar.gz

  SOURCE_PATH: ${{ github.workspace }}/code
  ARTIFACT_PATH: ${{ github.workspace }}/artifact

jobs:
  build-toolchain:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [aarch64, x86_64]
        platform: [w64-mingw32, linux-gnu]
        crt: [msvcrt, ucrt, libc]
        exclude:
          - platform: linux-gnu
            crt: msvcrt
          - platform: linux-gnu
            crt: ucrt
          - platform: w64-mingw32
            crt: libc
          - arch: aarch64
            platform: w64-mingw32

    env:
      TARGET: ${{ matrix.arch }}-${{ matrix.platform }}
      CRT: ${{ matrix.crt }}
      TOOLCHAIN_NAME: ${{ matrix.arch }}-${{ matrix.platform }}-${{ matrix.crt }}
      TOOLCHAIN_PACKAGE_NAME: ${{ matrix.arch }}-${{ matrix.platform }}-${{ matrix.crt }}-toolchain.tar.gz
      TESTS_PACKAGE_NAME: ${{ matrix.arch }}-${{ matrix.crt }}-tests.tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
          fetch-depth: 0

      - name: Checkout binutils
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BINUTILS_REPO }}
          ref: ${{ env.BINUTILS_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/${{ env.BINUTILS_VERSION }}

      - name: Checkout GCC
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GCC_REPO }}
          ref: ${{ env.GCC_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/${{ env.GCC_VERSION }}

      - name: Checkout MinGW
        if: ${{ matrix.platform != 'linux-gnu' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MINGW_REPO }}
          ref: ${{ env.MINGW_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/${{ env.MINGW_VERSION }}

      - name: Install dependencies
        run: |
          .github/scripts/install-dependencies.sh

      - name: Install libraries
        run: |
          .github/scripts/install-libraries.sh
  
      - name: Build binutils
        run: |
          .github/scripts/binutils/build.sh

      - name: Install cross headers and libraries
        if: ${{ matrix.platform == 'linux-gnu' }}
        run: |
          .github/scripts/binutils/install-cross-headers-libs.sh

      - name: Build MinGW headers
        if: ${{ matrix.platform != 'linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw-headers.sh

      - name: Build GCC
        run: |
          .github/scripts/toolchain/build-gcc.sh

      - name: Build MinGW CRT
        if: ${{ matrix.platform != 'linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw-crt.sh

      - name: Build libgcc
        run: |
          .github/scripts/toolchain/build-libgcc.sh

      - name: Build MinGW
        if: ${{ matrix.platform != 'linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw.sh

      - name: Build GCC libs
        run: |
          .github/scripts/toolchain/build-gcc-libs.sh

      - name: Pack toolchain
        if: ${{ env.TOOLCHAIN_NAME == 'aarch64-w64-mingw32-msvcrt' }}
        run: |
          .github/scripts/toolchain/pack.sh

      - name: Pack toolchain mock
        if: ${{ env.TOOLCHAIN_NAME != 'aarch64-w64-mingw32-msvcrt' }}
        run: |
          .github/scripts/toolchain/pack-mock.sh
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TOOLCHAIN_PACKAGE_NAME }}
          path: ${{ env.ARTIFACT_PATH }}/${{ env.TOOLCHAIN_PACKAGE_NAME }}
          retention-days: 3
