name: Build toolchain variants

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      binutils_branch:
        description: 'Binutils branch to build'
        required: false
        default: 'woarm64'
      gcc_branch:
        description: 'GCC branch to build'
        required: false
        default: 'woarm64'
      mingw_branch:
        description: 'Mingw branch to build'
        required: false
        default: 'woarm64'
      openblas_branch:
        description: 'OpenBLAS branch to test'
        required: false
        default: 'develop'
      openssl_branch:
        description: 'OpenSSL branch to test'
        required: false
        default: 'fix-tests'
      validate_only_toolchain_build:
        description: 'Only validate toolchain build'
        type: boolean
        required: false
        default: false
  workflow_call:
    inputs:
      binutils_branch:
        type: string
      gcc_branch:
        type: string
      mingw_branch:
        type: string
      validate_only_toolchain_build:
        type: boolean
        required: false
        default: false
    outputs:
      toolchain-package-name:
        value: ${{ jobs.build-toolchain.outputs.toolchain-package-name }}
      toolchain-cache-key:
        value: ${{ jobs.build-toolchain.outputs.toolchain-cache-key }}

env:
  BINUTILS_REPO: Windows-on-ARM-Experiments/binutils-woarm64
  BINUTILS_BRANCH: ${{ inputs.binutils_branch || 'aarch64-patch-stage1-v1' }}
  BINUTILS_VERSION: binutils-master

  GCC_REPO: Windows-on-ARM-Experiments/gcc-woarm64
  GCC_BRANCH: ${{ inputs.gcc_branch || 'aarch64-patch-stage1-v8' }}
  GCC_VERSION: gcc-master

  MINGW_REPO: Windows-on-ARM-Experiments/mingw-woarm64
  MINGW_BRANCH: ${{ inputs.mingw_branch || 'aarch64-patch-stage1-v1' }}
  MINGW_VERSION: mingw-w64-master

  OPENBLAS_REPO: OpenMathLib/OpenBLAS.git
  OPENBLAS_BRANCH: ${{ inputs.openblas_branch || 'develop' }}
  OPENBLAS_VERSION: openblas-develop

  ZLIB_REPO: madler/zlib
  ZLIB_BRANCH: 'develop'
  ZLIB_VERSION: zlib-develop

  LIBXML2_REPO: GNOME/libxml2
  LIBXML2_BRANCH: 'master'
  LIBXML2_VERSION: libxml2-master

  OPENSSL_REPO: Windows-on-ARM-Experiments/openssl
  OPENSSL_BRANCH: ${{ inputs.openssl_branch || 'fix-tests' }}
  OPENSSL_VERSION: openssl-master

  LIBJPEG_TURBO_REPO: libjpeg-turbo/libjpeg-turbo
  LIBJPEG_TURBO_BRANCH: 3.0.2
  LIBJPEG_TURBO_VERSION: libjpeg-turbo-main

  FFMPEG_REPO: FFmpeg/FFmpeg
  FFMPEG_BRANCH: master
  FFMPEG_VERSION: ffmpeg-master

  TOOLCHAIN_PATH: ${{ github.workspace }}/cross
  TOOLCHAIN_NAME: aarch64-w64-mingw32-msvcrt
  TOOLCHAIN_PACKAGE_NAME: aarch64-w64-mingw32-msvcrt-toolchain.tar.gz

  SOURCE_PATH: ${{ github.workspace }}/code
  ARTIFACT_PATH: ${{ github.workspace }}/artifact

jobs:
  build-toolchain:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [aarch64, x86_64]
        platform: [w64-mingw32, linux-gnu]
        crt: [msvcrt, ucrt, libc]
        exclude:
          - platform: linux-gnu
            crt: msvcrt
          - platform: linux-gnu
            crt: ucrt
          - platform: w64-mingw32
            crt: libc

    env:
      TARGET: ${{ matrix.arch }}-${{ matrix.platform }}
      CRT: ${{ matrix.crt }}
      PACK_TOOLCHAIN: ${{ matrix.arch == 'aarch64' && matrix.platform == 'w64-mingw32' && matrix.crt == 'msvcrt' }}
      TOOLCHAIN_NAME: ${{ matrix.arch }}-${{ matrix.platform }}-${{ matrix.crt }}
      TOOLCHAIN_PACKAGE_NAME: ${{ matrix.arch }}-${{ matrix.platform }}-${{ matrix.crt }}-toolchain.tar.gz
      TESTS_PACKAGE_NAME: ${{ matrix.arch }}-${{ matrix.crt }}-tests.tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
          fetch-depth: 0

      - name: Get workflow SHA
        id: workflow-sha
        run: |
          .github/scripts/get-files-sha.sh ${{ github.workspace }} .github/workflows/advanced.yml

      - name: Get binutils SHA
        id: binutils-sha
        run: |
          .github/scripts/get-repository-sha.sh ${{ env.BINUTILS_REPO }} ${{ env.BINUTILS_BRANCH }}

      - name: Get GCC SHA
        id: gcc-sha
        run: |
          .github/scripts/get-repository-sha.sh ${{ env.GCC_REPO }} ${{ env.GCC_BRANCH }}

      - name: Get MinGW SHA
        id: mingw-sha
        run: |
          .github/scripts/get-repository-sha.sh ${{ env.MINGW_REPO }} ${{ env.MINGW_BRANCH }}

      - name: Get binutils scripts SHA
        id: binutils-scripts-sha
        run: |
          .github/scripts/get-files-sha.sh ${{ github.workspace }} .github/scripts/binutils
  
      - name: Get toolchain scripts SHA
        id: toolchain-scripts-sha
        run: |
          .github/scripts/get-files-sha.sh ${{ github.workspace }} .github/scripts/toolchain

      - name: Cache toolchain
        if: ${{ !inputs.validate_only_toolchain_build }}
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: ${{ env.ARTIFACT_PATH }}/${{ env.TOOLCHAIN_PACKAGE_NAME }}
          key: ${{ env.TOOLCHAIN_NAME }}-${{ steps.workflow-sha.outputs.sha }}-${{ steps.binutils-sha.outputs.sha }}-${{ steps.gcc-sha.outputs.sha }}-${{ steps.mingw-sha.outputs.sha }}-${{ steps.binutils-scripts-sha.outputs.sha }}-${{ steps.toolchain-scripts-sha.outputs.sha }}

      - name: Checkout binutils
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BINUTILS_REPO }}
          ref: ${{ env.BINUTILS_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/${{ env.BINUTILS_VERSION }}

      - name: Checkout GCC
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GCC_REPO }}
          ref: ${{ env.GCC_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/${{ env.GCC_VERSION }}

      - name: Checkout MinGW
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && matrix.platform != 'linux-gnu' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MINGW_REPO }}
          ref: ${{ env.MINGW_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/${{ env.MINGW_VERSION }}

      - name: Install dependencies
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          .github/scripts/install-dependencies.sh

      - name: Install libraries
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          .github/scripts/install-libraries.sh
  
      - name: Build binutils
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          .github/scripts/binutils/build.sh

      - name: Install cross headers and libraries
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && matrix.platform == 'linux-gnu' }}
        run: |
          .github/scripts/binutils/install-cross-headers-libs.sh

      - name: Build MinGW headers
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && matrix.platform != 'linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw-headers.sh

      - name: Build GCC
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          .github/scripts/toolchain/build-gcc.sh

      - name: Build MinGW CRT
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && matrix.platform != 'linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw-crt.sh

      - name: Build libgcc
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          .github/scripts/toolchain/build-libgcc.sh

      - name: Build MinGW
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && matrix.platform != 'linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw.sh

      - name: Build GCC libs
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' }}
        run: |
          .github/scripts/toolchain/build-gcc-libs.sh

      - name: Pack toolchain
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PACK_TOOLCHAIN == 'true' }}
        run: |
          .github/scripts/toolchain/pack.sh

      - name: Pack toolchain mock
        if: ${{ steps.cache-toolchain.outputs.cache-hit != 'true' && env.PACK_TOOLCHAIN != 'true' }}
        run: |
          .github/scripts/toolchain/pack-mock.sh
          
      - name: Upload artifact
        if: ${{ !inputs.validate_only_toolchain_build && (steps.cache-toolchain.outputs.cache-hit != 'true' || env.PACK_TOOLCHAIN == 'true')}}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TOOLCHAIN_PACKAGE_NAME }}
          path: ${{ env.ARTIFACT_PATH }}/${{ env.TOOLCHAIN_PACKAGE_NAME }}
          retention-days: 3

    outputs:
      toolchain-package-name: ${{ env.PACK_TOOLCHAIN == 'true' && env.TOOLCHAIN_PACKAGE_NAME || '' }}
      toolchain-cache-key: ${{ env.PACK_TOOLCHAIN == 'true' && format('{0}-{1}-{2}-{3}-{4}-{5}-{6}', env.TOOLCHAIN_NAME, steps.workflow-sha.outputs.sha, steps.binutils-sha.outputs.sha, steps.gcc-sha.outputs.sha, steps.mingw-sha.outputs.sha, steps.binutils-scripts-sha.outputs.sha, steps.toolchain-scripts-sha.outputs.sha) || '' }}

