name: Build only toolchain variants

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      binutils_branch:
        description: 'Binutils branch to build'
        required: false
        default: 'woarm64'
      gcc_branch:
        description: 'GCC branch to build'
        required: false
        default: 'woarm64'
      mingw_branch:
        description: 'MinGW branch to build'
        required: false
        default: 'woarm64'
      cygwin_branch:
        description: 'Cygwin branch to build'
        required: false
        default: 'main'
      cygwin_packages_branch:
        description: 'Cygwin packages branch to build'
        required: false
        default: 'main'
      cocom_branch:
        description: 'COCOM branch to build'
        required: false
        default: 'master'
      openblas_branch:
        description: 'OpenBLAS branch to test'
        required: false
        default: 'develop'
      openssl_branch:
        description: 'OpenSSL branch to test'
        required: false
        default: 'fix-tests'
  workflow_call:
    inputs:
      binutils_branch:
        type: string
      gcc_branch:
        type: string
      mingw_branch:
        type: string
      cygwin_branch:
        type: string
      cygwin_packages_branch:
        type: string
      cocom_branch:
        type: string
    outputs:
      toolchain-package-name:
        value: ${{ jobs.build-toolchain.outputs.toolchain-package-name }}
      toolchain-cache-key:
        value: ${{ jobs.build-toolchain.outputs.toolchain-cache-key }}

env:
  BINUTILS_REPO: Windows-on-ARM-Experiments/binutils-woarm64
  BINUTILS_BRANCH: ${{ inputs.binutils_branch || 'woarm64' }}

  GCC_REPO: Windows-on-ARM-Experiments/gcc-woarm64
  GCC_BRANCH: ${{ inputs.gcc_branch || 'woarm64' }}

  MINGW_REPO: Windows-on-ARM-Experiments/mingw-woarm64
  MINGW_BRANCH: ${{ inputs.mingw_branch || 'woarm64' }}

  CYGWIN_REPO: Windows-on-ARM-Experiments/newlib-cygwin
  CYGWIN_BRANCH: ${{ inputs.cygwin_branch || 'main' }}

  CYGWIN_PACKAGES_REPO: Windows-on-ARM-Experiments/cygwin-packages
  CYGWIN_PACKAGES_BRANCH: ${{ inputs.cygwin_packages_branch || 'main' }}

  COCOM_REPO: https://git.code.sf.net/p/cocom/git
  COCOM_BRANCH: ${{ inputs.cocom_branch || 'master' }}

  OPENBLAS_REPO: OpenMathLib/OpenBLAS.git
  OPENBLAS_BRANCH: ${{ inputs.openblas_branch || 'develop' }}

  ZLIB_REPO: madler/zlib
  ZLIB_BRANCH: 'develop'

  LIBXML2_REPO: GNOME/libxml2
  LIBXML2_BRANCH: 'master'

  OPENSSL_REPO: Windows-on-ARM-Experiments/openssl
  OPENSSL_BRANCH: ${{ inputs.openssl_branch || 'fix-tests' }}

  LIBJPEG_TURBO_REPO: libjpeg-turbo/libjpeg-turbo
  LIBJPEG_TURBO_BRANCH: 3.0.2

  FFMPEG_REPO: FFmpeg/FFmpeg
  FFMPEG_BRANCH: release/6.1

  TOOLCHAIN_PATH: ${{ github.workspace }}/cross
  TOOLCHAIN_NAME: aarch64-w64-mingw32-msvcrt
  TOOLCHAIN_PACKAGE_NAME: aarch64-w64-mingw32-msvcrt-toolchain.tar.gz

  SOURCE_PATH: ${{ github.workspace }}/code
  BUILD_PATH: ${{ github.workspace }}/build
  CCACHE_DIR_PATH: ${{ github.workspace }}/ccache
  ARTIFACT_PATH: ${{ github.workspace }}/artifact

  CCACHE: 1
  DELETE_BUILD: 1

jobs:
  build-toolchain:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        arch: [aarch64, x86_64]
        platform: [w64-mingw32, pc-linux-gnu, pc-cygwin]
        crt: [msvcrt, ucrt, libc]
        exclude:
          - platform: w64-mingw32
            crt: libc
          - platform: pc-linux-gnu
            crt: msvcrt
          - platform: pc-linux-gnu
            crt: ucrt
          - platform: pc-cygwin
            crt: ucrt
          - platform: pc-cygwin
            crt: libc
          - platform: pc-cygwin
            arch: aarch64

    env:
      ARCH: ${{ matrix.arch }}
      PLATFORM: ${{ matrix.platform }}
      CRT: ${{ matrix.crt }}
      PACK_TOOLCHAIN: ${{ matrix.arch == 'aarch64' && matrix.platform == 'w64-mingw32' && matrix.crt == 'msvcrt' }}
      TOOLCHAIN_NAME: ${{ matrix.arch }}-${{ matrix.platform }}-${{ matrix.crt }}
      TOOLCHAIN_PACKAGE_NAME: ${{ matrix.arch }}-${{ matrix.platform }}-${{ matrix.crt }}-toolchain.tar.gz
      TESTS_PACKAGE_NAME: ${{ matrix.arch }}-${{ matrix.crt }}-tests.tar.gz

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}
          fetch-depth: 0

      - name: Checkout binutils
        uses: actions/checkout@v4
        with:
          repository: ${{ env.BINUTILS_REPO }}
          ref: ${{ env.BINUTILS_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/binutils

      - name: Checkout GCC
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GCC_REPO }}
          ref: ${{ env.GCC_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/gcc

      - name: Checkout MinGW
        if: ${{ matrix.platform != 'pc-linux-gnu' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MINGW_REPO }}
          ref: ${{ env.MINGW_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/mingw

      - name: Checkout Cygwin
        if: ${{ matrix.platform == 'pc-cygwin' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CYGWIN_REPO }}
          ref: ${{ env.CYGWIN_BRANCH }}
          path: ${{ env.SOURCE_PATH }}/cygwin

      - name: Checkout Cygwin packages
        if: ${{ matrix.platform == 'pc-cygwin' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CYGWIN_PACKAGES_REPO }}
          ref: ${{ env.CYGWIN_PACKAGES_BRANCH }}
          submodules: 'recursive'
          path: ${{ env.SOURCE_PATH }}/cygwin-packages

      - name: Checkout COCOM
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          cd ${{ env.SOURCE_PATH }}
          git clone ${{ env.COCOM_REPO }} -b ${{ env.COCOM_BRANCH }} cocom

      - name: Install dependencies
        run: |
          .github/scripts/install-dependencies.sh

      - name: Patch binutils stage1
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/binutils/patch-cygwin.sh 1

      - name: Patch toolchain stage1
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/toolchain/patch-cygwin.sh 1

      - name: Install libraries
        run: |
          .github/scripts/install-libraries.sh

      - name: Build binutils
        run: |
          .github/scripts/binutils/build.sh

      - name: Install cross headers and libraries
        if: ${{ matrix.platform == 'pc-linux-gnu' }}
        run: |
          .github/scripts/toolchain/install-cross-headers-libs.sh

      - name: Build MinGW headers
        if: ${{ matrix.platform != 'pc-linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw-headers.sh

      - name: Install Cygwin headers
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/toolchain/install-cygwin-headers.sh

      - name: Build GCC stage1
        if: ${{ matrix.platform != 'pc-linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-gcc-stage1.sh

      - name: Build MinGW CRT
        if: ${{ matrix.platform != 'pc-linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw-crt.sh

      - name: Build MinGW winpthreads
        if: ${{ matrix.platform == 'w64-mingw32' }}
        run: |
          .github/scripts/toolchain/build-mingw-winpthreads.sh
  
      - name: Build COCOM
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/toolchain/build-cocom.sh

      - name: Build Cygwin stage1
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/toolchain/build-cygwin.sh 1

      - name: Patch toolchain stage2
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/toolchain/patch-cygwin.sh 2

      - name: Install libraries
        run: |
          .github/scripts/install-libraries.sh

      - name: Build GCC stage2
        run: |
          .github/scripts/toolchain/build-gcc.sh

      - name: Build MinGW
        if: ${{ matrix.platform != 'pc-linux-gnu' }}
        run: |
          .github/scripts/toolchain/build-mingw.sh

      - name: Build Cygwin stage2
        if: ${{ matrix.platform == 'pc-cygwin' }}
        run: |
          .github/scripts/toolchain/build-cygwin.sh 2

    outputs:
      toolchain-package-name: ${{ env.PACK_TOOLCHAIN == 'true' && env.TOOLCHAIN_PACKAGE_NAME || '' }}
      toolchain-cache-key: ${{ env.PACK_TOOLCHAIN == 'true' && format('{0}-{1}-{2}-{3}-{4}-{5}-{6}', env.TOOLCHAIN_NAME, steps.workflow-sha.outputs.sha, steps.binutils-sha.outputs.sha, steps.gcc-sha.outputs.sha, steps.mingw-sha.outputs.sha, steps.binutils-scripts-sha.outputs.sha, steps.toolchain-scripts-sha.outputs.sha) || '' }}
